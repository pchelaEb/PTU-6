lab1
C
maxJump, n=map(int,input().split())
cout=[1,1]+[0]*(1+n-2)
for i in range(2,maxJump+1):
    cout[i]=cout[i-1]<<1
for i in range(maxJump+1,n+1):
    cout[i]=(cout[i-1]<<1) -cout[i-1-maxJump]
print(cout[n])

lab2
C
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>
 
using namespace std;
 
int main(){
    int n;
    cin >> n;
    vector<vector<int> > matr(n, vector<int>(n, 0));
    for(int i = 0; i < n; i++){
        int k;
        cin >> k;
        for(int j = 0; j < k; j++){
            int t;
            cin >> t;
            matr[i][t-1] = 1;
        }
    }
    vector<bool> vstd(n, false);
    vector<int> result;
    while(true){
        bool changed = false;
        for(int curr = 0; curr < n; curr++) {
            if(vstd[curr]) continue;
            for (int i = 0; i < n; i++) {
                if (matr[curr][i] == 1) {
                    break;
                }
                if (i == n - 1) {
                    changed = true;
                    vstd[curr] = true;
                    result.push_back(curr + 1);
                    for(int k = 0; k < n; k++){
                        matr[k][curr] = 0;
                    }
                }
            }
        }
        if(!changed){
            break;
        }
    }
    if(result.size() == n){
        cout << "YES" << endl;
        for(auto e: result){
            cout << e << endl;
        }
    }else{
        cout << "NO";
    }
    return 0;
}

lab3
C

#include <iostream>
#include <vector>
#include <algorithm>
 
using namespace std;
 
vector < vector<int> > g, gr;
vector<char> used;
vector<int> order, component;
 
void dfs1 (int v) {
    used[v] = true;
    for (size_t i=0; i<g[v].size(); ++i)
        if (!used[ g[v][i] ])
            dfs1 (g[v][i]);
    order.push_back (v);
}
 
void dfs2 (int v) {
    used[v] = true;
    component.push_back (v);
    for (size_t i=0; i<gr[v].size(); ++i)
        if (!used[ gr[v][i] ])
            dfs2 (gr[v][i]);
}
 
int main() {
    int n, m;
    cin >> n >> m;
    g.resize (n);
    gr.resize (n);
    used.resize (n);
    for (int i=0; i<m; ++i){
        int a, b;
        cin >> a >> b;
        a--; b--;
        g[a].push_back (b);
        gr[b].push_back (a);
    }
 
    used.assign (n, false);
    for (int i=0; i<n; ++i)
        if (!used[i])
            dfs1 (i);
    used.assign (n, false);
    int number_of_components = 0;
    for (int i=0; i<n; ++i) {
        int v = order[n-1-i];
        if (!used[v]) {
            dfs2 (v);
 
            number_of_components++;
            component.clear();
        }
    }
    cout << number_of_components << endl;
}

lab4
D
#include<iostream>
#include<vector>
#include<tuple>
 
using namespace std;
 
const int INF = 1000000000;
 
int main(){
    int n, start, finish, r;
    cin >> n >> start >> finish;
    vector<vector<tuple<int, int, int> > > g(n + 1);
    cin >> r;
    for(int i = 0; i < r; i++){
        int start, start_time, finish, finish_time;
        cin >> start >> start_time >> finish >> finish_time;
        g[start].push_back(make_tuple(start_time, finish, finish_time));
    }
    vector <int> time(n + 1, INF);
    time[start] = 0;
    vector <bool> used(n + 1);
    int min_time = 0;
    int min_village = start;
    while(min_time < INF){
        used[min_village] = true;
        int start = min_village;
        for(auto v: g[start]){
            int start_time = get<0>(v);
            int finish = get<1>(v);
            int finish_time = get<2>(v);
            if(time[start] <= start_time && finish_time < time[finish])
                time[finish] = finish_time;
        }
        min_time = INF;
        for(int v = 0; v < n; ++v)
            if(!used[v] && time[v] < min_time){
                min_time = time[v];
                min_village = v;
            }
    }
    if(time[finish] == INF)
        cout << -1 << endl;
    else
        cout << time[finish] << endl;
}

lab5
A
#include <bits/stdc++.h>
using namespace std;
int w[505][505];
int c[505][505];
int n, m;
 
void dfs(int i, int j) {
    if (w[i - 1][j] && !c[i - 1][j]) {
        c[i - 1][j] = c[i][j];
        dfs(i - 1, j);
    }
    if (w[i + 1][j] && !c[i + 1][j]) {
        c[i + 1][j] = c[i][j];
        dfs(i + 1, j);
    }
    if (w[i][j - 1] && !c[i][j - 1]) {
        c[i][j - 1] = c[i][j];
        dfs(i, j - 1);
    }
    if (w[i][j + 1] && !c[i][j + 1]) {
        c[i][j + 1] = c[i][j];
        dfs(i, j + 1);
    }
}
 
int main() {
    cin >> n >> m;
    char tmp;
 
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> tmp;
            w[i][j] = (tmp == '#' ? 1 : 0);
        }
    }
 
    int color = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (w[i][j] && !c[i][j]) {
                c[i][j] = color;
                dfs(i, j);
                color++;
            }
        }
    }
    cout <<color - 1;
    return 0;
}

lab6
B
#include <iostream>
using namespace std;
 
int main() {
    long N;
    cin >> N;
    long right = N;
    long left = 1;
    long root = 1;
    
    while(left != right) {
        left = (left + right + 1) / 2;
        root = root * 2 + 1;
    }
    cout << root;
}

D
#include <iostream>
#include <algorithm>
 
using namespace std;
 
long long n, t[4000004];
 
void build (long long a[], long long v, long long tl, long long tr) {
    if (tl == tr)
        t[v] = a[tl];
    else {
        long long tm = (tl + tr) / 2;
        build (a, v*2, tl, tm);
        build (a, v*2+1, tm+1, tr);
        t[v] = t[v*2] + t[v*2+1];
    }
}
 
long long sum (long long v, long long tl, long long tr, long long l, long long r) {
    if (l > r)
        return 0;
    if (l == tl && r == tr)
        return t[v];
    long long tm = (tl + tr) / 2;
    return sum (v*2, tl, tm, l, min(r,tm))
           + sum (v*2+1, tm+1, tr, max(l,tm+1), r);
}
 
void update (long long v, long long tl, long long tr, long long pos, long long new_val) {
    if (tl == tr)
        t[v] = new_val;
    else {
        long long tm = (tl + tr) / 2;
        if (pos <= tm)
            update (v*2, tl, tm, pos, new_val);
        else
            update (v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}
 
int main(){
    cin >> n;
    long long a[n];
    for(long long i = 0; i < n; i++){
        cin >> a[i];
    }
    build (a, 1, 0, n-1);
    long long m;
    cin >> m;
    while(m--){
        long long t;
        cin >> t;
        if(t == 1){
            long long l, r;
            cin >> l >> r;
            cout << sum(1, 0, n-1, l-1, r-1) << endl;
        }else{
            long long i, v;
            cin >> i >> v;
            update(1, 0, n-1, i-1, v);
        }
    }
    return 0;
}

lab7
D
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <random>
#include <chrono>
 
using namespace std;
using P = pair<int, int>;
 
mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());
 
#define debug(x) cout << #x << " = " << x << endl;
 
const int L = 26;
 
struct Node {
    Node * sons[L]{};
    int cnt[L]{};
    int endd;
};
 
void add(Node * a, string s) {
    Node * cur = a;
    for (char c : s) {
        int symb = c - 'a';
        if (cur->sons[symb] == nullptr) {
            cur->sons[symb] = new Node();
        }
        cur->cnt[symb]++;
        cur = cur->sons[symb];
    }
    cur->endd++;
}
 
string get_k(Node * a, int k) {
    string ret;
    Node * cur = a;
 
    while (cur->endd < k) {
        k -= cur->endd;
        for (int i = 0; i < L; ++i) {
            if (k > cur->cnt[i]) {
                k -= cur->cnt[i];
            } else {
                ret += (char) (i + 'a');
                cur = cur->sons[i];
                break;
            }
        }
    }
    return ret;
}
 
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
 
    Node * a = new Node();
    int q;
    cin >> q;
    while (q--) {
        string s;
        cin >> s;
        if ('a' <= s[0] && s[0] <= 'z') {
            //cout << s << endl;
            add(a, s);
        } else {
            cout << get_k(a, stoi(s)) << "\n";
        }
    }
    
 
 
    return 0;
}

lab8 
A
#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int n;
    cin >> n;
 
    cout << floor(log2(n+1/2)) << " " << n-1;
}

B
#include <iostream>
 
using namespace std;
 
int main()
{
    int n;
    cin >> n;
    int a[n], b[n];
 
    for (int i = 0; i < n; i++){
        cin >> a[i] >> b[i];
    }
 
    int max = b[0], index = 0, k = 0;
 
    for (int i = 0; i < n; i++){
        if (b[i] > max) {
            max = b[i];
            index = i;
        }
    }
 
    for (int i = 0; i < n; i++){
        if (a[i] > a[index]) {
            k++;
        }
    }
 
    cout << a[index] << " " << b[index] << "\n";
    cout << n-k-1 << " " << k;
}

C
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
 
using namespace std;
using P = pair<int, int>;
 
struct Node {
    Node *l, *r;
    int x;
    Node(int y) : x(y), l(nullptr), r(nullptr) {}
};
 
Node * insert(Node * a, int v) {
    if (a == nullptr) {
        return new Node(v);
    }
    if (a->x == v) {
        return a;
    }
    if (a->x > v) {
        a->l = insert(a->l, v);
    } else {
        a->r = insert(a->r, v);
    }
    return a;
}
 
int height(Node * a) {
    int ret = 0;
    if (a->l != nullptr) ret = max(ret, 1 + height(a->l));
    if (a->r != nullptr) ret = max(ret, 1 + height(a->r));
    return ret; 
}
 
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
 
    Node * a = nullptr;
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        int v;
        cin >> v;
        a = insert(a, v);
    }
 
    cout << height(a);
 
    return 0;
}

D
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <random>
#include <chrono>
 
using namespace std;
using P = pair<int, int>;
 
mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());
 
struct Node {
    Node *l, *r;
    int x, y, sz;
    Node(int val) : x(val), y(rnd()), sz(1), l(nullptr), r(nullptr) {}
};
 
int get_sz(Node * a) {
    if (!a) return 0;
    return a->sz;
}
 
void update(Node * a) {
    if (!a) return;
    a->sz = get_sz(a->l) + 1 + get_sz(a->r);
}
 
Node * merge(Node * a, Node * b) {
    if (!a) return b;    
    if (!b) return a;
 
    if (a->y > b->y) {
        a->r = merge(a->r, b);
        update(a);
        return a;
    } else {
        b->l = merge(a, b->l);
        update(b);
        return b;
    }
}
 
pair<Node*, Node*> split(Node * a, int val) {
    if (!a) return {nullptr, nullptr};
    if (a->x <= val) {
        auto b = split(a->r, val);
        a->r = b.first;
        update(a);
        return {a, b.second};
    } else {
        auto b = split(a->l, val);
        a->l = b.second;
        update(a);
        return {b.first, a};
    }
}
 
pair<Node*, Node*> split_k(Node *a, int k) {
    if (!a) return {nullptr, nullptr};
    if (k <= get_sz(a->l)) {
        auto b = split_k(a->l, k);
        a->l = b.second;
        update(a);
        return {b.first, a};
    } else {
        auto b = split_k(a->r, k - 1 - get_sz(a->l));
        a->r = b.first;
        update(a);
        return {a, b.second};
    }
}
 
int very_right(Node * a) {
    if (!a) return 0;
    if (!a->r) return a->x;
    return very_right(a->r);
}
 
Node * insert(Node * a, int val) {
    auto p = split(a, val);
    if (get_sz(p.first) == 0 || very_right(p.first) != val) {
        p.first = merge(p.first, new Node(val));
    }
    return merge(p.first, p.second);
}
 
void print(Node * a) {
    if (!a) return;
    print(a->l);
    cout << a->x << " ";
    print(a->r);
}
 
void prt(Node * a) {
    cout << "[ ";
    print(a);
    cout << "]\n";
}
 
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
 
    int q;
    cin >> q;
 
    Node * a = nullptr;
    while (q--) {
        string s;
        int x;
        cin >> s >> x;
        if (s[0] == 'a') {
            a = insert(a, x);
        } else {
            auto b = split_k(a, x);
            cout << very_right(b.first) << "\n";
            a = merge(b.first, b.second);
        }
    }
 
    return 0;
}

lab9
C
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <random>
#include <chrono>
 
using namespace std;
using P = pair<int, int>;
 
mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());
 
int mul(int a, int b, int p) {
return (1ll * a * b) % (1ll * p);
}
 
int mod_pow(int n, int k, int p) {
if (!k) return 1;
int c = mod_pow(n, k / 2, p);
c = mul(c, c, p);
if (k & 1) c = mul(c, n, p);
return c;
}
 
int main() {
ios::sync_with_stdio(0);
cin.tie(0);
 
int t;
cin >> t;
while (t--) {
int p, a;
cin >> p >> a;
cout << mod_pow(a, p - 2, p) << "\n";
}
 
return 0;
}